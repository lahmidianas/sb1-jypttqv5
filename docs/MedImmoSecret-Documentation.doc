# MedImmoSecret - Technical Documentation

## Project Overview

MedImmoSecret is a comprehensive property management and booking platform designed for luxury real estate in Tanger, Morocco. The platform facilitates property listings, booking management, and client relationship management through an intuitive admin interface.

### Core Features
- Property listing and management
- Booking system with availability tracking
- Client management
- Admin dashboard with real-time statistics
- Multi-language support (French/English)

### Technology Stack
- Frontend: React 18 with TypeScript
- UI Framework: Tailwind CSS
- State Management: React Context API
- Backend: Supabase (PostgreSQL)
- Hosting: Netlify
- Build Tool: Vite
- Icons: Lucide React

## System Architecture

The application follows a modern JAMstack architecture, leveraging Supabase as a backend-as-a-service (BaaS) solution.

### Architecture Components
1. Frontend (React SPA)
   - Handles UI rendering and state management
   - Communicates with Supabase via REST API
   - Manages client-side routing

2. Supabase Backend
   - PostgreSQL database
   - Row Level Security (RLS)
   - Real-time subscriptions
   - Authentication
   - Storage for property images

3. Netlify
   - Static hosting
   - CI/CD pipeline
   - Environment variable management

## Frontend Structure

### Directory Organization
```
src/
├── components/
│   ├── admin/         # Admin panel components
│   ├── auth/          # Authentication components
│   ├── common/        # Shared components
│   ├── properties/    # Property-related components
│   └── seo/          # SEO components
├── contexts/         # React Context providers
├── hooks/           # Custom React hooks
├── lib/            # Utility libraries
├── pages/          # Page components
├── routes/         # Route configurations
├── services/       # API service layers
├── types/          # TypeScript type definitions
└── utils/          # Helper functions
```

### Key Components
1. Admin Panel
   - Dashboard
   - Property Management
   - Booking Management
   - Client Management

2. Public Pages
   - Home
   - Property Listings
   - Property Details
   - Contact
   - About

3. Authentication
   - Login
   - Protected Routes

## Backend Structure

### Supabase Integration
- Direct database access via Supabase client
- Real-time subscriptions for live updates
- Row Level Security for data protection
- Storage bucket for property images

### API Architecture
- REST API via Supabase client
- GraphQL integration for complex queries
- Real-time subscriptions for live updates

## Database Schema

### Tables

1. properties
```sql
- id: uuid (PK)
- title: text
- description: text
- type: enum (apartment, villa, traditional)
- location: text
- price: numeric
- images: text[]
- features: text[]
- available: boolean
- created_at: timestamptz
- updated_at: timestamptz
```

2. bookings
```sql
- id: uuid (PK)
- property_id: uuid (FK)
- client_name: text
- client_email: text
- client_phone: text
- check_in: date
- check_out: date
- status: enum (waiting, confirmed)
- total_price: decimal
- created_at: timestamptz
- updated_at: timestamptz
```

3. clients
```sql
- id: uuid (PK)
- full_name: text
- email: text
- phone: text
- address: text
- created_at: timestamptz
- updated_at: timestamptz
```

### Relationships
- Bookings -> Properties (Many-to-One)
- Bookings -> Clients (Many-to-One)

## Admin Panel Functionality

### Dashboard
- Real-time statistics
- Property overview
- Recent bookings
- Revenue tracking

### Property Management
- CRUD operations for properties
- Image upload and management
- Availability tracking
- Pricing management

### Booking Management
- Create and manage bookings
- Status tracking (waiting/confirmed)
- Date validation
- Price calculation
- Client association

### Client Management
- Client database
- Booking history
- Contact information

## Security and Access Control

### Authentication
- Email/password authentication via Supabase Auth
- Protected routes using React Router
- Session management

### Row Level Security
- Table-level security policies
- Role-based access control
- Data isolation

### Data Protection
- Input validation
- SQL injection prevention
- XSS protection
- CORS configuration

## Deployment and Environment

### Environment Variables
```
VITE_SUPABASE_URL=<supabase-project-url>
VITE_SUPABASE_ANON_KEY=<supabase-anon-key>
VITE_GRAPHQL_ENDPOINT=/api/graphql
```

### Deployment Process
1. Code pushed to repository
2. Netlify builds the project
3. Environment variables injected
4. Static files deployed
5. DNS configuration updated

## Developer Guide

### Local Setup
1. Clone the repository
2. Install dependencies:
```bash
npm install
```
3. Create `.env` file with required variables
4. Start development server:
```bash
npm run dev
```

### Key Commands
- `npm run dev`: Start development server
- `npm run build`: Build production bundle
- `npm run preview`: Preview production build
- `npm run lint`: Run ESLint
- `npm run codegen`: Generate GraphQL types

### Development Notes
- Use Tailwind CSS for styling
- Follow TypeScript strict mode
- Implement responsive design
- Test across modern browsers
- Maintain SEO best practices

### Future Development
- Implement multi-language support
- Add payment integration
- Enhance booking analytics
- Implement email notifications
- Add property reviews system